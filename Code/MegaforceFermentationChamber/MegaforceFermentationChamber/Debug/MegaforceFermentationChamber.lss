
MegaforceFermentationChamber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001b4  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ded  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a52  00000000  00000000  000011b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000663  00000000  00000000  00001c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000254  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e9  00000000  00000000  000024c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000192  00000000  00000000  00002aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00002c3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e0       	ldi	r26, 0x02	; 2
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 30       	cpi	r26, 0x02	; 2
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
#include "MMINIT.h"
#include "TimeHandler.h"
static int x = 5;
int main(void)
{
    init_IO();
  f2:	0e 94 b2 00 	call	0x164	; 0x164 <init_IO>
	init_TH();
  f6:	0e 94 c3 00 	call	0x186	; 0x186 <init_TH>
	sei();
  fa:	78 94       	sei
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0xa>

000000fe <__vector_11>:
		
    }
}

ISR(TIMER1_COMPA_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	LED1_Tgl();
 120:	0e 94 be 00 	call	0x17c	; 0x17c <LED1_Tgl>
	x--;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if(x == 0){
 136:	89 2b       	or	r24, r25
 138:	21 f4       	brne	.+8      	; 0x142 <__vector_11+0x44>
		disable_TH();
 13a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <disable_TH>
		LED3_On();
 13e:	0e 94 bc 00 	call	0x178	; 0x178 <LED3_On>
	}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <init_IO>:
	PORTE &= (0<<LED_3);
}

void LED4_Off()
{
	PORTE &= (0<<LED_4);
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	8c 63       	ori	r24, 0x3C	; 60
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	8a b1       	in	r24, 0x0a	; 10
 16c:	83 7c       	andi	r24, 0xC3	; 195
 16e:	8a b9       	out	0x0a, r24	; 10
 170:	1e b8       	out	0x0e, r1	; 14
 172:	8f e0       	ldi	r24, 0x0F	; 15
 174:	8d b9       	out	0x0d, r24	; 13
 176:	08 95       	ret

00000178 <LED3_On>:
 178:	72 9a       	sbi	0x0e, 2	; 14
 17a:	08 95       	ret

0000017c <LED1_Tgl>:
}

void LED1_Tgl()
{
	PORTE ^= (1<<LED_1);
 17c:	9e b1       	in	r25, 0x0e	; 14
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	89 27       	eor	r24, r25
 182:	8e b9       	out	0x0e, r24	; 14
 184:	08 95       	ret

00000186 <init_TH>:
#include <AVR/io.h>

void init_TH()
{
	//Timer1 is in charge of keeping track of time remaining for the fermentation process 
	TCCR1A = (1 << WGM12); // Enables Timer1 to run in CTC mode
 186:	e0 e8       	ldi	r30, 0x80	; 128
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	80 83       	st	Z, r24
	OCR1A = 62500; // Number of ticks required to have timer keep track of time in seconds 
 18e:	84 e2       	ldi	r24, 0x24	; 36
 190:	94 ef       	ldi	r25, 0xF4	; 244
 192:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 196:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1A 	= (0 << COM1A1) | (0 << COM1A0); //Sets normal port operation, OC1A disconnected
 19a:	10 82       	st	Z, r1
	//OC1A is disconnected since TH doesn't require an external output
	TCCR1B = (1 << CS12); // Sets the pre-scaler to /256	
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1 << OCIE1A); // Enables the output compare A
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 1a8:	08 95       	ret

000001aa <disable_TH>:
}

void disable_TH()
{
	TCCR1B = (0 << CS12) | (0 << CS11) | (0 << CS10); //Sets clock source to none effectively disabling timer1
 1aa:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
